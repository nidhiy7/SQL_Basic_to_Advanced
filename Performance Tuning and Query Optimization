
# Query Optimazation

- Query optimization is the process of making SQL queries run faster and more efficiently

# Why use of Query Optimaztion
1) Performance Improvement - Faster Response Times: Optimized queries run faster, providing quicker results to users.
Efficient Resource Use: Reduces CPU, memory, and disk I/O usage, leading to better overall system performance.

2) Scalability:Handles More Load: Efficient queries allow the database to handle more transactions and users simultaneously.

3) Cost Reduction: Efficiently running databases can reduce the need for additional hardware or cloud resources.
User Experience:

4) Better User Experience: Faster applications lead to improved satisfaction and usability.

# Way to optimize the query

1) Use Index

Indexes are essential for improving the performance of SQL queries by allowing the database
to find and retrieve specific rows much faster than scanning the entire table.

CREATE INDEX idx_last_name ON employees(last_name);

-- Benefits of Using Indexes
Reduced Data Access Time: Indexes minimize the amount of data scanned.
Improved Query Performance: Complex queries involving joins and sorts run faster.
Enhanced User Experience: Faster queries lead to a more responsive application.

2) Using Union All to Optimize the Query

Performance Comparison
Scenario: Combining employee and contractor records without caring about duplicates.

With UNION: The query checks for and removes duplicate rows, which adds overhead.
With UNION ALL: The query simply concatenates the results, reducing execution time.

3) Avoid Using Select * , Select specific Column

4)  Optimizing Joins:

Proper Indexing: Ensure that columns used in JOIN operations are indexed.
Choose Right Join Types: Use the most efficient join type (INNER JOIN, LEFT JOIN) based on the use case.

5)  Avoiding Subqueries:
Replace with JOINs: Where possible, replace subqueries with JOINs or Common Table Expressions (CTEs) to improve performance.

6) Batch Processing:
Process in Chunks: For large data operations, process data in smaller batches to avoid overloading the system.




















